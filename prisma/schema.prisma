// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                     String    @id @default(cuid())
    name                   String?
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

    accounts    Account[]
    societies   Society[]
    memberShips Member[]
    invites     Invite[]
}

// App Models

model Society {
    id            String   @id @default(cuid())
    name          String   @db.VarChar(100)
    streetAddress String   @db.VarChar(255)
    addressLine2  String?  @default("") @db.VarChar(150)
    city          String   @db.VarChar(255)
    province      String   @db.VarChar(255)
    zipCode       String   @db.VarChar(15)
    country       String   @db.VarChar(255)
    password      String   @db.Text
    ownerId       String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    owner   User           @relation(fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    members Member[]
    images  SocietyMedia[]
    roles   Role[]
    invites Invite[]
}

model SocietyMedia {
    id        String   @id @default(cuid())
    uri       String   @unique @db.Text
    societyId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    society Society @relation(fields: [societyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Member {
    societyId String
    userId    String
    roleId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    society Society @relation(fields: [societyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    role    Role?   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@id(name: "memberId", [societyId, userId])
}

model Role {
    id            String   @id @default(cuid())
    name          String   @db.VarChar(255)
    accessGeneral Boolean  @default(false) // Access General Settings
    createRole    Boolean  @default(false) // Access Role Settings
    accessDanger  Boolean  @default(false) // Access Danger Settings
    createInvite  Boolean  @default(false) // Create and Send Invites
    assignRole    Boolean  @default(false) // Assign Role
    kickUser      Boolean  @default(false) // Can Remove Users
    societyId     String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    society Society  @relation(fields: [societyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    members Member[]
}

model Invite {
    societyId String
    userId    String
    status    INVITE_STATUS @default(PENDING)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    society Society @relation(fields: [societyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    to      User    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@id(name: "inviteId", [societyId, userId])
}

enum INVITE_STATUS {
    PENDING
    ACCEPTED
    IGNORED
}
