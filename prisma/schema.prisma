// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // uncomment next line if you use Prisma <5.10
    // directUrl = env("DATABASE_URL_UNPOOLED")
}

// Necessary for Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts             Account[]
    societies            Society[]
    memberShips          Member[]
    invites              Invite[]
    messages             Message[]
    rooms                MeetingRoom[]
    announcements        Announcement[]
    announcementComments AnnouncementComment[]
    polls                Poll[]
    votes                Vote[]
    subscriptions        UserSubscription[]
}

// App Models

model UserSubscription {
    id                     String   @id @default(cuid())
    userId                 String
    stripeCustomerId       String
    stripeSubscriptionId   String
    stripePriceId          String
    stripeCurrentPeriodEnd DateTime
    createdAt              DateTime @default(now()) @ignore
    updatedAt              DateTime @updatedAt @ignore

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Society {
    id            String   @id @default(cuid())
    name          String   @db.VarChar(100)
    streetAddress String   @db.VarChar(255)
    addressLine2  String?  @default("") @db.VarChar(150)
    city          String   @db.VarChar(255)
    province      String   @db.VarChar(255)
    zipCode       String   @db.VarChar(15)
    country       String   @db.VarChar(255)
    password      String   @db.Text
    ownerId       String
    createdAt     DateTime @default(now()) @ignore
    updatedAt     DateTime @updatedAt @ignore

    owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    members      Member[]
    images       SocietyMedia[]
    roles        Role[]
    invites      Invite[]
    channels     Channel[]
    rooms        MeetingRoom[]
    roadmaps     RoadmapList[]
    Announcement Announcement[]
    polls        Poll[]
}

model SocietyMedia {
    id        String   @id @default(cuid())
    uri       String   @unique @db.Text
    societyId String
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    society Society @relation(fields: [societyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Member {
    societyId String
    userId    String   @unique
    roleId    String?
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    society Society @relation(fields: [societyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    role    Role?   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id(name: "memberId", [societyId, userId])
    @@unique([societyId, userId])
}

model Role {
    id             String   @id @default(cuid())
    name           String   @db.VarChar(255)
    accessSettings Boolean  @default(false) // Access Settings Page
    createInvite   Boolean  @default(false) // Create and Send Invites
    assignRole     Boolean  @default(false) // Assign Role
    kickUser       Boolean  @default(false) // Can Remove Users
    manageChannel  Boolean  @default(false) // Manage Feed Channels
    sendMessage    Boolean  @default(false) // Send Message in Feed Channels
    createMeeting  Boolean  @default(false) // Create Meeting Rooms
    manageRoadmap  Boolean  @default(false) // Manage roadmap cards and list
    manageAccounts Boolean  @default(false) // Manage Accounts and Transactions
    canCreatePolls Boolean  @default(false) // Create Polls
    canVote        Boolean  @default(false) // Vote in Polls
    canAnnounce    Boolean  @default(false) // Make announcements
    canComment     Boolean  @default(false) // Comment in Announcements
    societyId      String
    createdAt      DateTime @default(now()) @ignore
    updatedAt      DateTime @updatedAt @ignore

    society Society  @relation(fields: [societyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    members Member[]
}

model Invite {
    societyId String
    userId    String
    status    INVITE_STATUS @default(PENDING)
    createdAt DateTime      @default(now()) @ignore
    updatedAt DateTime      @updatedAt @ignore

    society Society @relation(fields: [societyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    to      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id(name: "inviteId", [societyId, userId])
}

enum INVITE_STATUS {
    PENDING
    ACCEPTED
    IGNORED
}

model Channel {
    id        String   @id @default(cuid())
    name      String   @db.VarChar(50)
    societyId String
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    society  Society   @relation(fields: [societyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    messages Message[]
}

model Message {
    id        String   @id @default(cuid())
    content   String   @default("") @db.Text
    channelId String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @ignore

    channel     Channel             @relation(fields: [channelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    member      User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    attachments MessageAttachment[]
}

model MessageAttachment {
    id        String   @id @default(cuid())
    uri       String   @unique @db.Text
    messageId String
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    message Message @relation(fields: [messageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model MeetingRoom {
    id          String   @id @default(cuid())
    title       String   @db.VarChar(100)
    description String   @db.VarChar(250)
    startTime   DateTime
    endTime     DateTime
    userId      String
    societyId   String
    createdAt   DateTime @default(now()) @ignore
    updatedAt   DateTime @updatedAt @ignore

    society Society @relation(fields: [societyId], references: [id])
    user    User    @relation(fields: [userId], references: [id])
}

model RoadmapList {
    id        String   @id @default(cuid())
    title     String   @db.VarChar(50)
    order     Int
    societyId String
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    society Society       @relation(fields: [societyId], references: [id], onDelete: Cascade)
    cards   RoadmapCard[]
}

model RoadmapCard {
    id          String   @id @default(cuid())
    title       String   @db.VarChar(50)
    order       Int
    description String?  @db.VarChar(150)
    listId      String
    createdAt   DateTime @default(now()) @ignore
    updatedAt   DateTime @updatedAt @ignore

    list RoadmapList @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Announcement {
    id        String   @id @default(cuid())
    content   String   @db.VarChar(250)
    userId    String
    societyId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @ignore

    member      User                      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
    society     Society                   @relation(fields: [societyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    attachments AnnouncementAttachments[]
    comments    AnnouncementComment[]
}

model AnnouncementAttachments {
    id             String   @id @default(cuid())
    uri            String   @unique @db.Text
    name           String   @db.VarChar(250)
    announcementId String
    createdAt      DateTime @default(now()) @ignore
    updatedAt      DateTime @updatedAt @ignore

    transaction Announcement @relation(fields: [announcementId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model AnnouncementComment {
    id             String   @id @default(cuid())
    content        String   @db.VarChar(200)
    userId         String
    announcementId String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt @ignore

    user         User         @relation(fields: [userId], references: [id])
    announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Poll {
    id        String   @id @default(cuid())
    question  String   @db.VarChar(250)
    userId    String
    societyId String
    validTill DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @ignore

    user    User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    society Society       @relation(fields: [societyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    options PollOptions[]
    votes   Vote[]
}

model PollOptions {
    id        String   @id @default(cuid())
    name      String   @db.VarChar(250)
    pollId    String
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    poll  Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    votes Vote[]
}

model Vote {
    userId    String
    optionId  String
    pollId    String
    createdAt DateTime @default(now()) @ignore
    updatedAt DateTime @updatedAt @ignore

    option PollOptions @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user   User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    poll   Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id(name: "voteId", [userId, optionId, pollId])
    @@unique([userId, optionId])
}
