// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                     String    @id @default(cuid())
    name                   String?
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
    accounts               Account[]
    societies              Society[]
    memberShips            Member[]
}

model Society {
    id            String   @id @default(cuid())
    name          String   @db.VarChar(100)
    streetAddress String   @db.VarChar(255)
    addressLine2  String?  @default("") @db.VarChar(150)
    city          String   @db.VarChar(255)
    province      String   @db.VarChar(255)
    zipCode       String   @db.VarChar(15)
    country       String   @db.VarChar(255)
    password      String   @db.Text
    ownerEmail    String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    owner         User     @relation(fields: [ownerEmail], references: [email], onDelete: Restrict, onUpdate: Cascade)
    members       Member[]
}

model Member {
    id        String   @id @default(cuid())
    societyId String
    userEmail String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    society   Society  @relation(fields: [societyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    user      User     @relation(fields: [userEmail], references: [email], onDelete: Restrict, onUpdate: Cascade)
}
